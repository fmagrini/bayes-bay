from abc import abstractmethod, ABC
from typing import Tuple
from numbers import Number

from .._state import State


class Perturbation(ABC):
    """Base class for a perturbation callable
    
    Its subclasses represent different types of perturbations. The core functions of
    each subclass are :meth:`perturb` and :meth:`log_prior_ratio` and are to be called
    by :meth:`bayesbridge.BaseMarkovChain.advance_chain` on each iteration.
    
    Users don't instantiate these perturbation classes directly; the instances are 
    generated by :class:`bayesbridge.parameterization.Parameterization` and 
    :class:`bayesbridge.LogLikelihood` instead.
    """
    @abstractmethod
    def perturb(self, state: State) -> Tuple[State, Number]:
        """propose a new state from the given state and calculates its associated
        proposal ratio

        Parameters
        ----------
        state : State
            the given current state

        Returns
        -------
        Tuple[State, Number]
            proposed new state and the partial acceptance criteria excluding log 
            likelihood ratio for this perturbation
        """
        raise NotImplementedError

    def __call__(self, state: State) -> Tuple[State, Number]:
        """same as :meth:`perturb`

        Parameters
        ----------
        state : State
            the given current state

        Returns
        -------
        Tuple[State, Number]
            proposed new state and the partial acceptance criteria excluding log 
            likelihood ratio for this perturbation
        """
        return self.perturb(state)

    @property
    def type(self) -> str:
        """type of current perturbation (i.e. class name)

        Returns
        -------
        str
            the name of this current class
        """
        return self.__class__.__name__

    @property
    def __name__(self) -> str:
        """same as :attr:`type`

        Returns
        -------
        str
            the name of this current class
        """
        return self.type
